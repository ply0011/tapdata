#!/bin/bash -x
#
# Copyright 2017 StreamSets Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Copyright 2016 StreamSets Inc.
#

#
# Prerequisites:
# - The MapR client package must be installed and configured
#   on the machine where StreamSets is being installed.
#
# This script does following:
# - Obtain MapR version and MapR Home directory
# - Remove the MapR version from blacklist in etc/sdc.properties
# - Create soft links to MapR client libraries so that StreamSets data collector can load these at runtime.
# - Add permissions to MapR libraries in sdc-security.policy

BLACKLIST_PROP="system.stagelibs.blacklist"
PROP_FILENAME="sdc.properties"
POLICY_FILENAME="sdc-security.policy"
MAPR_LIB_BASE="streamsets-datacollector-mapr"
MAPR_SPARK_LIB="streamsets-datacollector-mapr_spark*-lib"

if [ -z ${SDC_HOME} ];then
  echo "Set the SDC_HOME environment variable to the Data Collector installation directory."
  exit 0
fi

# Check if SDC_HOME really points to the StreamSets Data Collector
if [ ! -f "${SDC_HOME}/bin/streamsets" ];then
   echo "SDC_HOME is not pointing to StreamSets Data Collector. Please check the directory path"
   exit 0
fi

if [ -z ${SDC_CONF} ];then
  echo "Set the SDC_CONF environment variable to the Data Collector configuration directory."
  exit 0
fi

# Check if SDC_CONF really points to the directory where config files are stored
if [ ! -f "${SDC_CONF}/${PROP_FILENAME}" ];then
  echo "SDC_CONF is not pointing to the directory where config files are stored. Please check the directory path."
  exit 0
fi

SDC_PROP_FILE="${SDC_CONF}/${PROP_FILENAME}"
SDC_POLICY_FILE="${SDC_CONF}/${POLICY_FILENAME}"

# Confirm sdc.properties exists in the expected directory and has a permission to write
if [ ! -w "${SDC_PROP_FILE}" ]; then
  echo "Error: Check ${SDC_PROP_FILE} exists and current user has a write permission"
  echo "Exit."
  exit 0
fi

# Check if this is running on supported OS
if [[ $OSTYPE == "darwin"* ]]; then
  # OS X requires specifying backup file extension in sed command
  BACKUP_EXT="''"
elif [[ $OSTYPE == "cygwin" ]];then
  echo "Error: Cannot used on Windows OS"
  exit 0
fi

# Resolve MapR Version
if [[ -z "${MAPR_VERSION}" ]];
then
  read -p "Please enter the MapR version (default 6.0.0): " MAPR_VERSION
fi
MAPR_VERSION=${MAPR_VERSION:=6.0.0}
# Check if input version is valid
if ! [[ ${MAPR_VERSION} =~ ^[1-9][0-9]*\.[0-9]*(\.[0-9]*)*$ ]];
then
  echo "Error: Invalid MapR version number"
  exit 0
fi
MAPR_VERSION=`expr "$MAPR_VERSION" : '\([1-9][0-9]*\.[0-9]*\)'`
_MAPR_VERSION=${MAPR_VERSION/./_}
MAPR_LIB=${MAPR_LIB_BASE}_${_MAPR_VERSION}-lib
# Check if this Data Collector support the MapR version
if [ ! -d "$SDC_HOME/streamsets-libs/$MAPR_LIB" ]; then
   echo "Error: StreamSets Data Collector does not support MapR version $MAPR_VERSION"
  exit 0
fi

# MEP is stored in separate stage library (for MapR 6 and above)
if [ ! -z $MAPR_MEP_VERSION ]; then
  MAPR_MEP_LIB=${MAPR_LIB_BASE}_${_MAPR_VERSION}-mep${MAPR_MEP_VERSION}-lib
  if [ ! -d "$SDC_HOME/streamsets-libs/$MAPR_MEP_LIB" ]; then
     echo "Error: StreamSets Data Collector does not support MapR version $MAPR_VERSION MEP $MAPR_MEP_VERSION (stage library $MAPR_MEP_LIB)"
    exit 0
  fi
fi

# Obtain the version of MapR Spark Data Collector supports
SDC_MAPR_SPARK_LIB=`ls $SDC_HOME/streamsets-libs | grep streamsets-datacollector-mapr_spark_*`
SDC_SPARK_VERSION=`echo $SDC_MAPR_SPARK_LIB | cut -d'_' -f 3,4 | sed 's/_/./g'`

# Obtain MapR home
if [[ -z "${MAPR_HOME}" ]];
then
  read -p "Please enter the absolute path of MapR Home (default /opt/mapr): " MAPR_HOME
fi
MAPR_HOME=${MAPR_HOME:="/opt/mapr"}

# Check if MAPR_HOME is indeed MapR home directory
if [ ! -e "${MAPR_HOME}/MapRBuildVersion" ]; then
  echo "Error: ${MAPR_HOME} is not the correct path to MapR Home"
  exit 0
fi
# Check if MapR Spark is installed in this platform
if [ ! -d "${MAPR_HOME}/spark" ]; then
  echo "Warning: Spark is not installed. Skipping MapR Spark enablement."
else
  # Obtain MapR Spark version and check if SDC supports it
  MAPR_SPARK_VERSION=`ls ${MAPR_HOME}/spark |cut -d'-' -f2 | cut -d'.' -f1,2`
  if [ $SDC_SPARK_VERSION = $MAPR_SPARK_VERSION ];then
    ENABLE_MAPR_SPARK=true
  else
    echo "Warning: The MapR Spark version is $MAPR_SPARK_VERSION while SDC supports version $SDC_SPARK_VERSION"
  fi
fi

# Remove given library from the list of blacklisted properties
function blacklist_remove {
  # Library to be removed from the blacklist
  STAGE_LIB=$1
  echo "Enabling $STAGE_LIB"

  original_property=$(grep -i "$BLACKLIST_PROP" "${SDC_PROP_FILE}")
  blacklist_property=${original_property/${STAGE_LIB},/}
  if [ ! -z $ENABLE_MAPR_SPARK ];then
    echo "Enabling MapR Spark ..."
    blacklist_property=${blacklist_property/${SDC_MAPR_SPARK_LIB}/}
  fi
  sed -i ${BACKUP_EXT} "s/${original_property}/${blacklist_property}/" "${SDC_PROP_FILE}"
}

# Create MapR specific symlinks for given stage library
function create_symlinks {
  STAGE_LIB=$1
  echo "Working on stage library $STAGE_LIB"

  # Create symbolic links. Ignore the stderr (there will be a lot of symlinks already exist errors)
  ln -s ${MAPR_HOME}/lib/*.jar ${SDC_HOME}/streamsets-libs/${STAGE_LIB}/lib/ 2>/dev/null
  ln -s ${MAPR_HOME}/hadoop/hadoop-*/share/hadoop/common/lib/*.jar ${SDC_HOME}/streamsets-libs/${STAGE_LIB}/lib/ 2>/dev/null
  ln -s ${MAPR_HOME}/hadoop/hadoop-*/share/hadoop/mapreduce/lib/*.jar ${SDC_HOME}/streamsets-libs/${STAGE_LIB}/lib/ 2>/dev/null
  ln -s ${MAPR_HOME}/hadoop/hadoop-*/share/hadoop/mapreduce/*.jar ${SDC_HOME}/streamsets-libs/${STAGE_LIB}/lib/ 2>/dev/null
  ln -s ${MAPR_HOME}/lib/maprfs-${MAPR_VERSION}*.jar  ${SDC_HOME}/root-lib/ 2>/dev/null
  if [ -d ${MAPR_HOME}/hive ];then
    ln -s ${MAPR_HOME}/hive/hive-*/lib/*.jar ${SDC_HOME}/streamsets-libs/${STAGE_LIB}/lib/ 2>/dev/null
    ln -s ${MAPR_HOME}/hive/hive-*/hcatalog/share/hcatalog/*.jar ${SDC_HOME}/streamsets-libs/${STAGE_LIB}/lib/ 2>/dev/null
  fi
  if [ -d ${MAPR_HOME}/hbase ];then
    ln -s ${MAPR_HOME}/hbase/hbase-*/lib/*.jar  ${SDC_HOME}/streamsets-libs/${STAGE_LIB}/lib/ 2>/dev/null
  fi

  # SDC-6449: Remove the symlink to metrics-core jar if MapR Hive ships same version as SDC.
  SDC_METRICS_CORE_VERSION=`ls ${SDC_HOME}/api-lib | grep "metrics-core" | cut -d'-' -f3 | cut -d'.' -f1`
  MAPR_METRICS_CORE_JAR=`ls ${SDC_HOME}/streamsets-libs/${STAGE_LIB}/lib | grep "metrics-core-${SDC_METRICS_CORE_VERSION}\.[0-9]*\.[0-9]*\.jar"`
 if [ ! -z ${MAPR_METRICS_CORE_JAR} ];then
    printf "Removing symlink to ${MAPR_METRICS_CORE_JAR} ..."
    rm ${SDC_HOME}/streamsets-libs/${STAGE_LIB}/lib/${MAPR_METRICS_CORE_JAR}
    printf "Done.\n"
  fi

  echo "Removing old Hadoop 0.20 jars ...."
  rm -rf ${SDC_HOME}/streamsets-libs/${STAGE_LIB}/lib/hadoop-0.20*.jar

  echo "Removing troublesome Jackson dependencies"
  rm -rf ${SDC_HOME}/streamsets-libs/${STAGE_LIB}/lib/jackson-annotations-2.4.*.jar
  rm -rf ${SDC_HOME}/streamsets-libs/${STAGE_LIB}/lib/jackson-core-2.4.*.jar
  rm -rf ${SDC_HOME}/streamsets-libs/${STAGE_LIB}/lib/jackson-databind-2.4.*.jar
}

echo ""
echo "Configuration:"
echo "SDC_HOME=$SDC_HOME"
echo "SDC_CONF=$SDC_CONF"
echo "MAPR_HOME=$MAPR_HOME"
echo "MAPR_VERSION=$MAPR_VERSION"
echo "MAPR_MEP_VERSION=$MAPR_MEP_VERSION"
if [ ! -z $ENABLE_MAPR_SPARK ];then
  echo "MAPR_SPARK_VERSION=$MAPR_SPARK_VERSION"
fi
echo ""

echo "Updating sdc.properties file ...."
blacklist_remove $MAPR_LIB
if [ ! -z $MAPR_MEP_LIB ]; then
  blacklist_remove $MAPR_MEP_LIB
fi
echo "Done."
echo ""

echo "Symlinking MapR Jar files"
create_symlinks $MAPR_LIB
if [ ! -z $MAPR_MEP_LIB ]; then
  create_symlinks $MAPR_MEP_LIB
fi
echo "Done."
echo ""

# Add permission to sdc-security.policy file
printf "Updating sdc-security.policy file ..."
if grep -q "file://${MAPR_HOME}" "${SDC_POLICY_FILE}"; then
  printf "permission already added.\n"
else
  printf "\ngrant codebase \"file://%s/-\" {\n  permission java.security.AllPermission;\n};\n" "${MAPR_HOME}" >> ${SDC_POLICY_FILE}
  printf "Done\n"
fi

echo "Succeeded"
